// Generated by CoffeeScript 1.3.3
var assert, expect, ok;

require('js-yaml');

assert = require('assert');

expect = require('chai').expect;

ok = require('../lib/ok_ru.js');

describe("ok.ru", function() {
  before(function() {
    this.settings = require('./settings.yml');
    this.accessToken = null;
    return this.refreshToken = null;
  });
  describe("Initialization", function() {
    it('#getOptions', function() {
      var baseOptions;
      baseOptions = ok.getOptions();
      expect(baseOptions).to.have.property('applicationSecretKey');
      expect(baseOptions).to.have.property('applicationKey');
      expect(baseOptions).to.have.property('applicationId');
      expect(baseOptions).to.have.property('accessToken');
      expect(baseOptions).to.have.property('refreshToken');
      expect(baseOptions).to.have.property('restBase');
      return expect(baseOptions).to.have.property('refreshBase');
    });
    it('#get', function() {
      return expect(ok.get).to.be.a('function');
    });
    it('#post', function() {
      return expect(ok.get).to.be.a('function');
    });
    it('Needs odnoklassniki app params', function() {
      var error;
      error = function() {
        return ok.get({
          method: 'test'
        });
      };
      return expect(error).to["throw"](/Please setup requestOptions with valid params./);
    });
    return it('Needs accessToken', function() {
      var error;
      ok.setOptions({
        applicationId: this.settings.app.app_id,
        applicationKey: this.settings.app.public_key,
        applicationSecretKey: this.settings.app.app_secret_key,
        accessToken: null
      });
      error = function() {
        return ok.get({
          method: 'test'
        });
      };
      return expect(error).to["throw"](/AccessToken does not initialized./);
    });
  });
  return describe('REST processing', function() {
    before(function() {
      var default_options;
      return default_options = {
        applicationId: this.settings.app.app_id,
        applicationKey: this.settings.app.public_key,
        applicationSecretKey: this.settings.app.app_secret_key,
        accessToken: this.settings.tokens.access_token != null ? this.settings.tokens.access_token : this.accessToken,
        refreshToken: this.settings.tokens.refresh_token != null ? this.settings.tokens.refresh_token : this.refreshToken
      };
    });
    ok.setOptions(default_options);
    it('Needs valid accessToken', function(done) {
      return ok.get({
        method: 'users.getCurrentUser'
      }, function(err, data) {
        if (data.error_code != null) {
          throw "Request for validate access token failed with message: " + data.error_msg;
        } else {
          expect(data).to.have.property('uid');
          return done();
        }
      });
    });
    it('Send data via POST method', function(done) {
      return ok.post({
        method: 'users.isAppUser'
      }, function(err, data) {
        expect(data).to.be.a('boolean');
        return done();
      });
    });
    it('Send data via GET method', function(done) {
      return ok.get({
        method: 'users.isAppUser'
      }, function(err, data) {
        expect(data).to.be.a('boolean');
        return done();
      });
    });
    it('Can send many arguments', function(done) {
      return ok.post({
        method: 'users.getInfo',
        uids: '554914033022',
        fields: 'uid, first_name, last_name, gender, age, online, url_profile'
      }, function(err, data) {
        expect(data[0]).to.have.property('uid');
        return done();
      });
    });
    it('Should refresh token', function(done) {
      var refresh_token;
      refresh_token = ok.getOptions()['refreshToken'];
      return ok.refresh(refresh_token, function(err, data) {
        expect(data).to.have.property('access_token');
        return done();
      });
    });
    return it('Should processing request errors', function(done) {
      ok.setOptions({
        accessToken: 'Invalid'
      });
      return ok.post({
        method: 'users.isAppUser'
      }, function(err, data, response) {
        expect(err).to.have.property('error_msg');
        expect(response).to.exist;
        return done();
      });
    });
  });
});
